{
  "additional_metadata": null,
  "argv": [
    "./interposition/src/main/python/setup.py",
    "-t",
    "-n",
    "akka-raft-fuzz-long"
  ],
  "cwd": "/Users/cs/Research/UCB/code/sts2-applications",
  "host": {
    "cpu_info": "",
    "free": "",
    "name": "yossarian",
    "num_cores": "0",
    "uptime": "12:34  up 4 days, 10:31, 8 users, load averages: 2.19 1.58 1.41"
  },
  "modules": {
    "sts2": {
      "branch": "raft-58-initialization",
      "commit": "5a6fef90efc66295b9fbf718facd85735e1fab56",
      "diff": "diff --git a/interposition/src/main/scala/verification/RunnerUtils.scala b/interposition/src/main/scala/verification/RunnerUtils.scala\nindex f52f498..ef34397 100644\n--- a/interposition/src/main/scala/verification/RunnerUtils.scala\n+++ b/interposition/src/main/scala/verification/RunnerUtils.scala\n@@ -136,16 +136,24 @@ object RunnerUtils {\n \n   def deserializeMCS(experiment_dir: String,\n       messageDeserializer: MessageDeserializer,\n-      scheduler: ExternalEventInjector[_] with Scheduler):\n-        Tuple4[Seq[ExternalEvent], EventTrace, ViolationFingerprint, Seq[Tuple2[Props, String]]] = {\n+      scheduler: ExternalEventInjector[_] with Scheduler=null): // if null, use dummy\n+        Tuple5[Seq[ExternalEvent], EventTrace, ViolationFingerprint,\n+               Seq[Tuple2[Props, String]], MinimizationStats] = {\n     val deserializer = new ExperimentDeserializer(experiment_dir)\n-    Instrumenter().scheduler = scheduler\n-    scheduler.populateActorSystem(deserializer.get_actors)\n+    val _scheduler = if (scheduler == null)\n+      new ReplayScheduler(SchedulerConfig())\n+      else scheduler\n+    Instrumenter().scheduler = _scheduler\n+    _scheduler.populateActorSystem(deserializer.get_actors)\n     val violation = deserializer.get_violation(messageDeserializer)\n     val trace = deserializer.get_events(messageDeserializer, Instrumenter().actorSystem)\n     val mcs = deserializer.get_mcs\n     val actorNameProps = deserializer.get_actors\n-    return (mcs, trace, violation, actorNameProps)\n+    val stats = deserializer.get_stats\n+    if (scheduler == null) {\n+      _scheduler.shutdown\n+    }\n+    return (mcs, trace, violation, actorNameProps, stats)\n   }\n \n   def replayExperiment(experiment_dir: String,\ndiff --git a/interposition/src/main/scala/verification/Serialization.scala b/interposition/src/main/scala/verification/Serialization.scala\nindex 9875a20..4b762ce 100644\n--- a/interposition/src/main/scala/verification/Serialization.scala\n+++ b/interposition/src/main/scala/verification/Serialization.scala\n@@ -390,6 +390,12 @@ class ExperimentDeserializer(results_dir: String) {\n     queue ++= events\n     return new EventTrace(queue, originalExternals)\n   }\n+\n+  def get_stats(): MinimizationStats = {\n+    val source = scala.io.Source.fromFile(results_dir + ExperimentSerializer.stats)\n+    val lines = try source.mkString finally source.close()\n+    return MinimizationStats.fromJson(lines)\n+  }\n }\n \n object JavaSerialization {\ndiff --git a/interposition/src/main/scala/verification/minification/Minimizer.scala b/interposition/src/main/scala/verification/minification/Minimizer.scala\nindex 2cfd57f..e28892a 100644\n--- a/interposition/src/main/scala/verification/minification/Minimizer.scala\n+++ b/interposition/src/main/scala/verification/minification/Minimizer.scala\n@@ -2,6 +2,7 @@ package akka.dispatch.verification\n \n import scala.collection.mutable.HashMap\n import scala.util.parsing.json.JSONObject\n+import scala.util.parsing.json.JSON\n \n trait Minimizer {\n   // Returns the MCS.\n@@ -34,15 +35,20 @@ class MinimizationStats {\n   var test_oracle : String = \"\"\n   var strategyToStats = new HashMap[(String,String),InnerStats]\n \n-  // Update which strategy, oracle pair we're recording stats for\n+  // Update which <strategy, oracle> pair we're recording stats for\n   def updateStrategy(_minimization_strategy: String, _test_oracle: String) {\n-    if (strategyToStats contains ((_minimization_strategy,_test_oracle))) {\n-      throw new IllegalArgumentException(\n-        s\"(minimization_strategy ${_minimization_strategy}, test_oracle ${_test_oracle }) already exist\")\n+    var __minimization_strategy = _minimization_strategy\n+    var __test_oracle = _test_oracle\n+    var counter = 2\n+    while (strategyToStats contains ((__minimization_strategy,__test_oracle))) {\n+      __minimization_strategy = __minimization_strategy + counter\n+      __test_oracle = __test_oracle + counter\n+      counter += 1\n     }\n-    minimization_strategy = _minimization_strategy\n-    test_oracle = _test_oracle\n-    strategyToStats((_minimization_strategy, _test_oracle)) = new InnerStats\n+\n+    minimization_strategy = __minimization_strategy\n+    test_oracle = __test_oracle\n+    strategyToStats((minimization_strategy, test_oracle)) = new InnerStats\n   }\n \n   class InnerStats {\n@@ -186,3 +192,11 @@ class MinimizationStats {\n     return json\n   }\n }\n+\n+object MinimizationStats {\n+  def fromJson(json: String): MinimizationStats = {\n+    val outer = JSON.parseFull(json).asInstanceOf[Map[String,Any]]\n+    outer.foreach { case (k,v) => println(k + \" \" + v) }\n+    return null\n+  }\n+}\ndiff --git a/src/main/scala/pl/project13/Runner.scala b/src/main/scala/pl/project13/Runner.scala\nindex 42457a6..3838ad1 100644\n--- a/src/main/scala/pl/project13/Runner.scala\n+++ b/src/main/scala/pl/project13/Runner.scala\n@@ -52,6 +52,32 @@ class RaftMessageFingerprinter extends MessageFingerprinter {\n     }\n     return None\n   }\n+\n+  // Does this message trigger a logical clock contained in subsequent\n+  // messages to be incremented?\n+  override def causesClockIncrement(msg: Any) : Boolean = {\n+    msg match {\n+      case Timer(\"election-timer\", _, _, _) => return true\n+      case _ => return false\n+    }\n+  }\n+\n+  // Extract a clock value from the contents of this message\n+  override def getLogicalClock(msg: Any) : Option[Long] = {\n+    msg match {\n+      case RequestVote(term, _, _, _) =>\n+        return Some(term.termNr)\n+      case AppendEntries(term, _, _, _, _) =>\n+        return Some(term.termNr)\n+      case VoteCandidate(term) =>\n+        return Some(term.termNr)\n+      case DeclineCandidate(term) =>\n+        return Some(term.termNr)\n+      case a: AppendResponse =>\n+        return Some(a.term.termNr)\n+      case _ => return None\n+    }\n+  }\n }\n \n class AppendWordConstuctor(word: String) extends ExternalMessageConstructor {\n@@ -224,7 +250,7 @@ object Main extends App {\n   val messageGen = new ClientMessageGenerator(members)\n   val fuzzer = new Fuzzer(60, weights, messageGen, prefix, postfix=postfix)\n \n-  val fuzz = false\n+  val fuzz = true\n \n   var traceFound: EventTrace = null\n   var violationFound: ViolationFingerprint = null\n@@ -237,9 +263,9 @@ object Main extends App {\n       val replayer = new ReplayScheduler(schedulerConfig)\n       return replayer\n     }\n-\n     def randomiziationCtor() : RandomizationStrategy = {\n-      return new FullyRandom(userDefinedFilter)\n+      //return new FullyRandom(userDefinedFilter)\n+      return new SrcDstFIFO(userDefinedFilter)\n     }\n     val tuple = RunnerUtils.fuzz(fuzzer, raftChecks.invariant,\n                                  schedulerConfig,\n@@ -256,7 +282,7 @@ object Main extends App {\n   }\n \n   if (fuzz) {\n-    // XXX var provenanceTrace = traceFound.intersection(filteredTrace, fingerprintFactory)\n+    //var provenanceTrace = traceFound.intersection(filteredTrace, fingerprintFactory)\n \n     val serializer = new ExperimentSerializer(\n       fingerprintFactory,\n@@ -267,7 +293,7 @@ object Main extends App {\n       depGraph=Some(depGraph), initialTrace=Some(initialTrace),\n       filteredTrace=Some(filteredTrace))\n \n-    val (mcs, stats, verified_mcs, violation) =\n+    val (mcs, stats1, verified_mcs, violation) =\n     RunnerUtils.stsSchedDDMin(false,\n       schedulerConfig,\n       traceFound,\n@@ -278,28 +304,61 @@ object Main extends App {\n       throw new RuntimeException(\"MCS wasn't validated\")\n     }\n \n-    val mcs_dir = serializer.serializeMCS(dir, mcs, stats, verified_mcs, violation, false)\n-\n-    val (intMinStats, intMinTrace) = RunnerUtils.minimizeInternals(schedulerConfig,\n-                          mcs,\n-                          verified_mcs.get,\n-                          ExperimentSerializer.getActorNameProps(traceFound),\n-                          violationFound)\n-\n-    RunnerUtils.printMinimizationStats(\n-      traceFound, Some(filteredTrace), verified_mcs.get, intMinTrace, schedulerConfig.messageFingerprinter)\n-\n-    serializer.recordMinimizedInternals(mcs_dir, intMinStats, intMinTrace)\n+    val mcs_dir = serializer.serializeMCS(dir, mcs, stats1, verified_mcs, violation, false)\n     println(\"MCS DIR: \" + mcs_dir)\n   } else { // !fuzz\n     val dir =\n-    \"/Users/cs/Research/UCB/code/sts2-applications/experiments/akka-raft-fuzz-long_2015_08_10_20_12_21_DDMin_STSSchedNoPeek\"\n+    \"/Users/cs/Research/UCB/code/sts2-applications/experiments/akka-raft-fuzz-long_2015_08_28_10_57_11__\"\n+    val mcs_dir =\n+    \"/Users/cs/Research/UCB/code/sts2-applications/experiments/akka-raft-fuzz-long_2015_08_24_22_47_54_DDMin_STSSchedNoPeek\"\n \n+    val serializer = new ExperimentSerializer(\n+      fingerprintFactory,\n+      new RaftMessageSerializer)\n+\n+    val deserializer = new ExperimentDeserializer(mcs_dir)\n     val msgDeserializer = new RaftMessageDeserializer(Instrumenter()._actorSystem)\n \n-    val replayTrace = RunnerUtils.replayExperiment(dir, schedulerConfig, msgDeserializer,\n-      traceFile=ExperimentSerializer.minimizedInternalTrace)\n+    val (mcs, verified_mcs, violationFound, actors, stats) =\n+      RunnerUtils.deserializeMCS(mcs_dir, msgDeserializer)\n+\n+    if (stats == null) throw new RuntimeException(\"FOO\")\n+\n+    var removalStrategy = new SrcDstFIFORemoval(verified_mcs,\n+      schedulerConfig.messageFingerprinter)\n+\n+    val (intMinStats, intMinTrace) = RunnerUtils.minimizeInternals(schedulerConfig,\n+      mcs, verified_mcs, actors, violationFound,\n+      removalStrategyCtor=() => removalStrategy, stats=Some(stats))\n+\n+    var additionalTraces = Seq[(String, EventTrace)]()\n+\n+    val minimizer = new FungibleClockMinimizer(schedulerConfig, mcs,\n+      intMinTrace, actors, violationFound,\n+      testScheduler=TestScheduler.DPORwHeuristics,\n+      stats=Some(intMinStats))\n+    val (wildcard_stats, clusterMinTrace) = minimizer.minimize\n \n-    RunnerUtils.printDeliveries(replayTrace)\n+    additionalTraces = additionalTraces :+ ((\"FungibleClocks\", clusterMinTrace))\n+\n+    removalStrategy = new SrcDstFIFORemoval(clusterMinTrace,\n+      schedulerConfig.messageFingerprinter)\n+\n+    val (intMinStats2, minTrace2) = RunnerUtils.minimizeInternals(schedulerConfig,\n+      mcs, clusterMinTrace, actors, violationFound,\n+      removalStrategyCtor=() => removalStrategy,\n+      stats=Some(wildcard_stats))\n+\n+    serializer.recordMinimizationStats(mcs_dir, intMinStats2)\n+\n+    additionalTraces = additionalTraces :+ ((\"2nd intMin\", minTrace2))\n+\n+    val (traceFound, _, _) = RunnerUtils.deserializeExperiment(dir, msgDeserializer)\n+    val origDeserializer = new ExperimentDeserializer(dir)\n+    val filteredTrace = origDeserializer.get_filtered_initial_trace\n+\n+    RunnerUtils.printMinimizationStats(\n+      traceFound, filteredTrace, verified_mcs, intMinTrace, schedulerConfig.messageFingerprinter,\n+      additionalTraces)\n   }\n }",
      "status": "On branch raft-58-initialization\nYour branch is ahead of 'origin/raft-58-initialization' by 4 commits.\n  (use \"git push\" to publish your local commits)\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   interposition/src/main/scala/verification/RunnerUtils.scala\n\tmodified:   interposition/src/main/scala/verification/Serialization.scala\n\tmodified:   interposition/src/main/scala/verification/minification/Minimizer.scala\n\tmodified:   src/main/scala/pl/project13/Runner.scala\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"
    }
  },
  "sys": {
    "lsb_release": "",
    "uname": "Darwin yossarian 14.5.0 Darwin Kernel Version 14.5.0: Wed Jul 29 02:26:53 PDT 2015; root:xnu-2782.40.9~1/RELEASE_X86_64 x86_64"
  },
  "timestamp": "2015_08_28_12_34_49",
  "user": "cs"
}
