{
  "additional_metadata": null,
  "argv": [
    "./interposition/src/main/python/setup.py",
    "-t",
    "-n",
    "akka-raft-fuzz"
  ],
  "cwd": "/Users/cs/Research/UCB/code/sts2-applications",
  "host": {
    "cpu_info": "",
    "free": "",
    "name": "yossarian",
    "num_cores": "0",
    "uptime": "18:45  up 3 days,  8:02, 5 users, load averages: 1.12 1.34 1.37"
  },
  "modules": {
    "sts2": {
      "branch": "akka-raft",
      "commit": "92c2f77fd30a1a4cf5e1916019222d32aa91dd68",
      "diff": "diff --git a/src/main/scala/pl/project13/RaftChecks.scala b/src/main/scala/pl/project13/RaftChecks.scala\nindex ea7b4ec..eb5b6b1 100644\n--- a/src/main/scala/pl/project13/RaftChecks.scala\n+++ b/src/main/scala/pl/project13/RaftChecks.scala\n@@ -233,6 +233,12 @@ class LogMatchChecker(parent: RaftChecks) {\n         }\n         var currentIdx = 0\n         while (currentIdx <= matchIdx) {\n+          // TODO(cs): I think `index` is a misnomer; it doesn't mean index of the\n+          // log's array. Hence the stack trace in RaftChecksStackTrace.txt. Either\n+          // that, or I've got a bug in my own code.\n+          if (log.length <= currentIdx || otherLog.length <= currentIdx) {\n+            return Some(\"LogMatch:\"+actor+\":\"+otherActor+\":\"+currentIdx+\"notlongenough\")\n+          }\n           val myEntry = log(currentIdx)\n           val otherEntry = otherLog(currentIdx)\n           if (myEntry.command != otherEntry.command ||\ndiff --git a/src/main/scala/pl/project13/Runner.scala b/src/main/scala/pl/project13/Runner.scala\nindex 4d5b7da..b5659a7 100644\n--- a/src/main/scala/pl/project13/Runner.scala\n+++ b/src/main/scala/pl/project13/Runner.scala\n@@ -78,8 +78,6 @@ object Main extends App {\n   var raftChecks = new RaftChecks\n \n   def invariant(seq: Seq[ExternalEvent], checkpoint: HashMap[String,Option[CheckpointReply]]) : Option[ViolationFingerprint] = {\n-    return Some(RaftViolation(new HashSet[String]))\n-    /*\n     var livenessViolations = checkpoint.toSeq flatMap {\n       case (k, None) => Some(\"Liveness:\"+k)\n       case _ => None\n@@ -101,14 +99,11 @@ object Main extends App {\n         println(\"Violations found! liveness\" + livenessViolations)\n         return Some(RaftViolation(new HashSet[String] ++ livenessViolations))\n     }\n-    */\n   }\n \n-  val members = (1 to 3) map { i => s\"raft-member-$i\" }\n+  val members = (1 to 9) map { i => s\"raft-member-$i\" }\n \n   val prefix = Array[ExternalEvent]() ++\n-    //Array[ExternalEvent](Start(() =>\n-    //  RaftClientActor.props(Instrumenter().actorSystem() / \"raft-member-*\"), \"client\")) ++\n     members.map(member =>\n       Start(() => Props.create(classOf[WordConcatRaftActor]), member)) ++\n     members.map(member =>\n@@ -166,7 +161,7 @@ object Main extends App {\n   val serializer = new ExperimentSerializer(\n       new RaftMessageFingerprinter,\n       new RaftMessageSerializer)\n-  val experiment_dir = serializer.record_experiment(\"akka-raft\",\n+  val experiment_dir = serializer.record_experiment(\"akka-raft-fuzz\",\n       traceFound.filterCheckpointMessages(), violationFound)\n   val deserializer = new ExperimentDeserializer(experiment_dir)\n \n@@ -177,12 +172,14 @@ object Main extends App {\n   val trace = deserializer.get_events(raftDeserializer, Instrumenter().actorSystem)\n   val violation = deserializer.get_violation(raftDeserializer)\n \n+  /*\n   println(\"----------\")\n   println(\"deserialized trace:\")\n   for (e <- trace) {\n     println(e)\n   }\n   println(\"----------\")\n+  */\n \n   /*\n   // Very important! Need to update the actor refs recorded in the event\n@@ -209,6 +206,7 @@ object Main extends App {\n   */\n \n   // Now do the replay.\n+  println(\"Trying replay:\")\n   val events = replayer.replay(trace, populateActors=false)\n   println(\"Done with replay\")\n   replayer.shutdown",
      "status": "On branch akka-raft\nYour branch is up-to-date with 'origin/akka-raft'.\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   src/main/scala/pl/project13/RaftChecks.scala\n\tmodified:   src/main/scala/pl/project13/Runner.scala\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\tbugs.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"
    }
  },
  "sys": {
    "lsb_release": "",
    "uname": "Darwin yossarian 13.4.0 Darwin Kernel Version 13.4.0: Wed Dec 17 19:05:52 PST 2014; root:xnu-2422.115.10~1/RELEASE_X86_64 x86_64"
  },
  "timestamp": "2015_03_01_18_45_42",
  "user": "cs"
}
