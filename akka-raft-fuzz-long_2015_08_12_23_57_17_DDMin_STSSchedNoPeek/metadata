{
  "additional_metadata": null,
  "argv": [
    "./interposition/src/main/python/setup.py",
    "-n",
    "akka-raft-fuzz-long_2015_08_12_23_57_17_DDMin_STSSchedNoPeek"
  ],
  "cwd": "/Users/cs/Research/UCB/code/sts2-applications",
  "host": {
    "cpu_info": "",
    "free": "",
    "name": "yossarian",
    "num_cores": "0",
    "uptime": "23:57  up 7 days,  3:52, 7 users, load averages: 2.35 1.88 1.68"
  },
  "modules": {
    "sts2": {
      "branch": "raft-66",
      "commit": "bd4836a047d08548ee0156dd31d4e4f8a1733c21",
      "diff": "diff --git a/src/main/scala/pl/project13/RaftChecks.scala b/src/main/scala/pl/project13/RaftChecks.scala\nindex 8129fd2..86afa29 100644\n--- a/src/main/scala/pl/project13/RaftChecks.scala\n+++ b/src/main/scala/pl/project13/RaftChecks.scala\n@@ -339,6 +339,7 @@ class LeaderCompletenessChecker(parent: RaftChecks) {\n     // The (0-indexed) index of the first sortedTerm that is > than the current committed\n     // entry.\n     var termWatermark = 0\n+    // Sort by Term\n     val sortedCommitted = parent.allCommitted.toArray.sortWith((c1, c2) => c1._2 < c2._2)\n     for (committed <- sortedCommitted) {\n       // Move the waterMark if necessary\ndiff --git a/src/main/scala/pl/project13/Runner.scala b/src/main/scala/pl/project13/Runner.scala\nindex dfbe46c..6a66783 100644\n--- a/src/main/scala/pl/project13/Runner.scala\n+++ b/src/main/scala/pl/project13/Runner.scala\n@@ -224,7 +224,7 @@ object Main extends App {\n   val messageGen = new ClientMessageGenerator(members)\n   val fuzzer = new Fuzzer(60, weights, messageGen, prefix, postfix=postfix)\n \n-  val fuzz = false\n+  val fuzz = true\n \n   var traceFound: EventTrace = null\n   var violationFound: ViolationFingerprint = null\n@@ -244,8 +244,8 @@ object Main extends App {\n     val tuple = RunnerUtils.fuzz(fuzzer, raftChecks.invariant,\n                                  schedulerConfig,\n                                  validate_replay=Some(replayerCtor),\n-                                 maxMessages=Some(200),  // XXX\n-                                 invariant_check_interval=5,\n+                                 maxMessages=Some(300),  // XXX\n+                                 invariant_check_interval=20,\n                                  randomizationStrategyCtor=randomiziationCtor,\n                                  computeProvenance=true)\n     traceFound = tuple._1\n@@ -293,7 +293,7 @@ object Main extends App {\n     println(\"MCS DIR: \" + mcs_dir)\n   } else { // !fuzz\n     val dir =\n-    \"/Users/cs/Research/UCB/code/sts2-applications/experiments/akka-raft-fuzz-long_2015_08_12_14_26_44_DDMin_STSSchedNoPeek\"\n+    \"/Users/cs/Research/UCB/code/sts2-applications/experiments/akka-raft-fuzz-long_2015_08_12_22_18_53_DDMin_STSSchedNoPeek\"\n \n     val msgDeserializer = new RaftMessageDeserializer(Instrumenter()._actorSystem)\n \ndiff --git a/src/main/scala/pl/project13/scala/akka/raft/model/LogIndexMap.scala b/src/main/scala/pl/project13/scala/akka/raft/model/LogIndexMap.scala\nindex 6a66005..16abd27 100644\n--- a/src/main/scala/pl/project13/scala/akka/raft/model/LogIndexMap.scala\n+++ b/src/main/scala/pl/project13/scala/akka/raft/model/LogIndexMap.scala\n@@ -60,27 +60,38 @@ case class LogIndexMap private (private var backing: Map[ActorRef, Int], private\n       val oldQuorum = indexOnMajority(oldMembers)\n       val newQuorum = indexOnMajority(newMembers)\n \n-      if (oldQuorum == -1) newQuorum\n-      else if (newQuorum == -1) oldQuorum\n+      if (oldQuorum == 0) newQuorum\n+      else if (newQuorum == 0) oldQuorum\n       else math.min(oldQuorum, newQuorum)\n   }\n \n   private def indexOnMajority(include: Set[ActorRef]): Int = {\n-    val indexCountPairs = backing\n+    // Our goal is to find the match index e that has the\n+    // following property:\n+    //   - a quorum [N / 2 + 1] of the nodes has match index >= e\n+\n+    // We first sort the match indices\n+    val sortedMatchIndices = backing\n       .filterKeys(include)\n-      .groupBy(_._2)\n-      .map { case (k, m) => k -> m.size }\n+      .values\n       .toList\n+      .sorted\n \n-    indexCountPairs match {\n-      case Nil => 0\n-      case _ =>\n-        indexCountPairs.sortBy(- _._2).head // sort by size\n-        ._1\n+    if (sortedMatchIndices.isEmpty) {\n+      return 0\n     }\n \n+    assert(sortedMatchIndices.size == include.size)\n+\n+    // The element e we are looking is now at the (CEILING[N / 2] - 1)st index.\n+    // [ consider three examples:\n+    //   1,1,1,3,3  => correct value: 1\n+    //   1,1,3,3,3  => correct value: 3\n+    //   1,1,3,3    => correct value: 1\n+    // ]\n+    return sortedMatchIndices(LogIndexMap.ceiling(include.size, 2) - 1)\n   }\n-  \n+\n   @tailrec final def valueFor(member: ActorRef): Int = backing.get(member) match {\n     case None =>\n       backing = backing.updated(member, initializeWith)\n@@ -88,10 +99,13 @@ case class LogIndexMap private (private var backing: Map[ActorRef, Int], private\n     case Some(value) =>\n       value\n   }\n-  \n }\n \n object LogIndexMap {\n   def initialize(members: Set[ActorRef], initializeWith: Int) =\n     new LogIndexMap(Map(members.toList.map(_ -> initializeWith): _*), initializeWith)\n+\n+  def ceiling(numerator: Int, divisor: Int): Int = {\n+    if (numerator % divisor == 0) numerator / divisor else (numerator / divisor) + 1\n+  }\n }",
      "status": "On branch raft-66\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   src/main/scala/pl/project13/RaftChecks.scala\n\tmodified:   src/main/scala/pl/project13/Runner.scala\n\tmodified:   src/main/scala/pl/project13/scala/akka/raft/model/LogIndexMap.scala\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"
    }
  },
  "sys": {
    "lsb_release": "",
    "uname": "Darwin yossarian 14.4.0 Darwin Kernel Version 14.4.0: Thu May 28 11:35:04 PDT 2015; root:xnu-2782.30.5~1/RELEASE_X86_64 x86_64"
  },
  "timestamp": "2015_08_12_23_57_19",
  "user": "cs"
}
