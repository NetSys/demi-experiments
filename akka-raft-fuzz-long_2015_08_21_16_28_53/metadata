{
  "additional_metadata": null,
  "argv": [
    "./interposition/src/main/python/setup.py",
    "-t",
    "-n",
    "akka-raft-fuzz-long"
  ],
  "cwd": "/Users/cs/Research/UCB/code/sts2-applications",
  "host": {
    "cpu_info": "",
    "free": "",
    "name": "yossarian",
    "num_cores": "0",
    "uptime": "16:28  up 15 days, 20:24, 7 users, load averages: 2.58 1.83 1.50"
  },
  "modules": {
    "sts2": {
      "branch": "raft-46",
      "commit": "77680b27e2fcdef3e8903c7c4b65f242698a3fb1",
      "diff": "diff --git a/interposition/src/main/scala/verification/RunnerUtils.scala b/interposition/src/main/scala/verification/RunnerUtils.scala\nindex 36201ec..62024a2 100644\n--- a/interposition/src/main/scala/verification/RunnerUtils.scala\n+++ b/interposition/src/main/scala/verification/RunnerUtils.scala\n@@ -604,20 +604,17 @@ object RunnerUtils {\n         while (!traceStats.isEmpty) {\n           val current = traceStats.head\n           traceStats = traceStats.tail\n+\n           if (prev == null) {\n-            println(s\"{} message deliveries: {} ({} externals, {} timers)\",\n-                    current._1, current._2.size, current._3, current._4)\n+            println(s\"${current._1} message deliveries: ${current._2.size} (${current._3} externals, ${current._4} timers)\")\n           } else {\n-            println(s\"Removed by {}: {} ({} externals, {} timers)\",\n-              current._1, (current._2.size - prev._2.size),\n-              (current._3 - prev._3), (current._4 - prev._4))\n+            println(s\"Removed by ${current._1}: ${(current._2.size - prev._2.size)} (${(current._3 - prev._3)} externals, ${(current._4 - prev._4)} timers)\")\n           }\n \n           prev = current\n \n           if (traceStats.isEmpty) {\n-            println(s\"Final deliveries: {} ({} externals, {} timers)\",\n-              current._1, current._2.size, current._3, current._4)\n+            println(s\"Final deliveries: ${current._2.size} (${current._3} externals, ${current._4} timers)\")\n             // TODO(cs): annotate which events are unignorable.\n             println(\"Final messages delivered:\") // w/o fingerints\n             current._2 foreach { case e => println(e) }\ndiff --git a/interposition/src/main/scala/verification/schedulers/STSScheduler.scala b/interposition/src/main/scala/verification/schedulers/STSScheduler.scala\nindex 1731f34..c7783ca 100644\n--- a/interposition/src/main/scala/verification/schedulers/STSScheduler.scala\n+++ b/interposition/src/main/scala/verification/schedulers/STSScheduler.scala\n@@ -456,6 +456,12 @@ class STSScheduler(val schedulerConfig: SchedulerConfig,\n             }\n \n             println(\"Ignoring message \" + m)\n+            println(\"pendingEvents:\")\n+            pendingEvents.get((m.sender, m.receiver)) match {\n+              case Some(hash) =>\n+                hash.foreach { case (k,v) => println(k) }\n+              case None =>\n+            }\n           case Quiescence =>\n             // This is just a nop. Do nothing\n             event_orchestrator.events += Quiescence\ndiff --git a/src/main/scala/pl/project13/Runner.scala b/src/main/scala/pl/project13/Runner.scala\nindex 42a23b1..10c0ddd 100644\n--- a/src/main/scala/pl/project13/Runner.scala\n+++ b/src/main/scala/pl/project13/Runner.scala\n@@ -203,7 +203,7 @@ object Main extends App {\n   val messageGen = new ClientMessageGenerator(members)\n   val fuzzer = new Fuzzer(0, weights, messageGen, prefix)\n \n-  val fuzz = false\n+  val fuzz = true\n \n   var traceFound: EventTrace = null\n   var violationFound: ViolationFingerprint = null\n@@ -216,11 +216,15 @@ object Main extends App {\n       val replayer = new ReplayScheduler(schedulerConfig)\n       return replayer\n     }\n+    def randomizationStrategy() : RandomizationStrategy = {\n+      return new SrcDstFIFO\n+    }\n     val tuple = RunnerUtils.fuzz(fuzzer, raftChecks.invariant,\n                                  schedulerConfig,\n                                  validate_replay=Some(replayerCtor),\n                                  maxMessages=Some(250),\n-                                 invariant_check_interval=10) // XXX\n+                                 invariant_check_interval=10, // XXX\n+                                 randomizationStrategyCtor=randomizationStrategy)\n     traceFound = tuple._1\n     violationFound = tuple._2\n     depGraph = tuple._3\n@@ -249,18 +253,36 @@ object Main extends App {\n \n     val mcs_dir = serializer.serializeMCS(dir, mcs, stats, verified_mcs, violation, false)\n \n-    // Actually try minimizing twice, to make it easier to understand what's\n-    // going on during each \"Ignoring next\" run.\n+    val removalStrategy = new SrcDstFIFORemoval(verified_mcs.get,\n+      schedulerConfig.messageFingerprinter)\n+\n     val (intMinStats, intMinTrace) = RunnerUtils.minimizeInternals(schedulerConfig,\n                           mcs,\n                           verified_mcs.get,\n                           ExperimentSerializer.getActorNameProps(traceFound),\n-                          violationFound)\n+                          violationFound,\n+                          removalStrategy=removalStrategy)\n+\n+    var additionalTraces = Seq[(String, EventTrace)]()\n+\n+    val minimizer = new FungibleClockMinimizer(schedulerConfig, mcs,\n+      intMinTrace, ExperimentSerializer.getActorNameProps(traceFound),\n+      violationFound)\n+    val (_, clusterMinTrace) = minimizer.minimize\n+\n+    additionalTraces = additionalTraces :+ ((\"FungibleClocks\", clusterMinTrace))\n+\n+    val (_, minTrace2) = RunnerUtils.minimizeInternals(schedulerConfig,\n+      mcs, clusterMinTrace, ExperimentSerializer.getActorNameProps(traceFound),\n+      violationFound,\n+      removalStrategy=removalStrategy)\n+\n+    additionalTraces = additionalTraces :+ ((\"2nd intMin\", minTrace2))\n \n     RunnerUtils.printMinimizationStats(\n-      traceFound, Some(filteredTrace), verified_mcs.get, intMinTrace, schedulerConfig.messageFingerprinter)\n+      traceFound, Some(filteredTrace), verified_mcs.get, intMinTrace, schedulerConfig.messageFingerprinter,\n+      additionalTraces)\n \n-    serializer.recordMinimizedInternals(mcs_dir, intMinStats, intMinTrace)\n     println(\"MCS DIR: \" + mcs_dir)\n   } else { // !fuzz\n     val dir =",
      "status": "On branch raft-46\nYour branch is ahead of 'origin/raft-46' by 4 commits.\n  (use \"git push\" to publish your local commits)\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   interposition/src/main/scala/verification/RunnerUtils.scala\n\tmodified:   interposition/src/main/scala/verification/schedulers/STSScheduler.scala\n\tmodified:   src/main/scala/pl/project13/Runner.scala\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"
    }
  },
  "sys": {
    "lsb_release": "",
    "uname": "Darwin yossarian 14.4.0 Darwin Kernel Version 14.4.0: Thu May 28 11:35:04 PDT 2015; root:xnu-2782.30.5~1/RELEASE_X86_64 x86_64"
  },
  "timestamp": "2015_08_21_16_28_53",
  "user": "cs"
}
