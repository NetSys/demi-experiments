{
  "additional_metadata": null,
  "argv": [
    "./interposition/src/main/python/setup.py",
    "-t",
    "-n",
    "akka-raft-fuzz"
  ],
  "cwd": "/Users/cs/Research/UCB/code/sts2-applications",
  "host": {
    "cpu_info": "",
    "free": "",
    "name": "yossarian",
    "num_cores": "0",
    "uptime": "17:09  up 6 days,  4:04, 6 users, load averages: 2.81 1.78 1.52"
  },
  "modules": {
    "sts2": {
      "branch": "akka-raft",
      "commit": "e646c50bbe0362303cafd1d4f099a36b75c1c133",
      "diff": "diff --git a/interposition/src/main/scala/verification/RunnerUtils.scala b/interposition/src/main/scala/verification/RunnerUtils.scala\nindex 72a2c9c..f43fa0d 100644\n--- a/interposition/src/main/scala/verification/RunnerUtils.scala\n+++ b/interposition/src/main/scala/verification/RunnerUtils.scala\n@@ -525,6 +525,8 @@ object RunnerUtils {\n     //   - Ensure that whenever a component is masked from one Send()'s\n     //     message contents, all other Send()'s have the same component\n     //     masked. i.e. throughout minimization, the first invariant holds!\n+    //   - (Definitely specific to akka-raft:) if an ActorRef component is\n+    //     removed, also remove the Start event for that node.\n \n     // Pseudocode:\n     // for component in firstSend.messageConstructor.getComponents:\n@@ -556,14 +558,25 @@ object RunnerUtils {\n     }\n \n     def modifyMCS(mcs: Seq[ExternalEvent], maskedIndices: Set[Int]): Seq[ExternalEvent] = {\n-      return (mcs map {\n+      // Also remove Start() events for masked actors\n+      val maskedActors = components.zipWithIndex.filter {\n+        case (e, i) => maskedIndices contains i\n+      }.map { case (e, i) => e.path.name }.toSet\n+\n+      return mcs flatMap {\n         case s @ Send(dst, ctor) =>\n           val updated = Send(dst, ctor.maskComponents(maskedIndices))\n           // Be careful to make Send ids the same.\n           updated._id = s._id\n-          updated\n-        case e => e\n-      })\n+          Some(updated)\n+        case s @ Start(_, name) =>\n+          if (maskedActors contains name) {\n+            None\n+          } else {\n+            Some(s)\n+          }\n+        case e => Some(e)\n+      }\n     }\n \n     var maskedIndices = Set[Int]()\n@@ -594,8 +607,8 @@ object RunnerUtils {\n     //    (including internal deliveries that disappeared \"by chance\")\n     //  - deliveries removed by internal minimization\n     //  - final number of deliveries\n-    //  - number of non-delivery external events that were pruned by minimizing?\n     // TODO(cs): print how many replays went into each of these steps\n+    // TODO(cs): number of non-delivery external events that were pruned by minimizing?\n     // Make sure not to count checkpoint and failure detector messages.\n     var deserializer = new ExperimentDeserializer(original_experiment_dir)\n     val dummy_sched = new ReplayScheduler\ndiff --git a/interposition/src/main/scala/verification/schedulers/AuxilaryTypes.scala b/interposition/src/main/scala/verification/schedulers/AuxilaryTypes.scala\nindex d1eb616..40b2787 100644\n--- a/interposition/src/main/scala/verification/schedulers/AuxilaryTypes.scala\n+++ b/interposition/src/main/scala/verification/schedulers/AuxilaryTypes.scala\n@@ -44,8 +44,8 @@ trait ExternalMessageConstructor {\n   def apply() : Any\n   // Optional, for `shrinking`:\n   // Get the components that make up the content of the message we construct\n-  // in apply().\n-  def getComponents() : Seq[Any] = List.empty\n+  // in apply(). For now, only relevant to cluster membership messages.\n+  def getComponents() : Seq[ActorRef] = List.empty\n   // Given a sequence of indices (pointing to elements in `getComponents()`),\n   // create a new ExternalMessageConstructor that does not include those\n   // components upon apply().\ndiff --git a/src/main/scala/pl/project13/Runner.scala b/src/main/scala/pl/project13/Runner.scala\nindex e736afe..98bc7b1 100644\n--- a/src/main/scala/pl/project13/Runner.scala\n+++ b/src/main/scala/pl/project13/Runner.scala\n@@ -144,18 +144,6 @@ object Main extends App {\n \n   Instrumenter().registerShutdownCallback(shutdownCallback)\n \n-  val prefix_dir = \"/Users/cs/Research/UCB/code/sts2-applications/experiments/\"\n-  val original = prefix_dir+\"akka-raft-fuzz_2015_05_17_17_14_33\"\n-  val mcs_no_shrink = prefix_dir+\"akka-raft-fuzz_2015_05_17_17_14_33_DDMin_STSSchedNoPeek\"\n-  val mcs_shrink = prefix_dir+\"akka-raft-fuzz_2015_05_17_17_14_33_DDMin_STSSchedNoPeek_shrunk\"\n-  var msgDeserializer = new RaftMessageDeserializer(Instrumenter().actorSystem)\n-  RunnerUtils.printMinimizationStats(original, mcs_no_shrink,\n-    msgDeserializer)\n-  RunnerUtils.printMinimizationStats(original, mcs_shrink,\n-    msgDeserializer)\n-  throw new IllegalStateException(\"wee\")\n-\n-\n   val fuzz = true\n \n   var traceFound: EventTrace = null\n@@ -237,6 +225,8 @@ object Main extends App {\n \n   traceFound = traceFound.intersection(filteredTrace, fingerprintFactory)\n \n+  var msgDeserializer = new RaftMessageDeserializer(Instrumenter().actorSystem)\n+\n   if (fuzz) {\n \n     for (shrink <- Seq(false, true)) {\n@@ -272,6 +262,8 @@ object Main extends App {\n                                           violation5)\n \n           serializer.recordMinimizedInternals(mcs_dir, stats, lastFailingTrace)\n+\n+          RunnerUtils.printMinimizationStats(dir, mcs_dir, msgDeserializer)\n         case None =>\n           None\n       }\n@@ -280,7 +272,6 @@ object Main extends App {\n \n   if (!fuzz) {\n     val mcs_dir = \"/Users/cs/Research/UCB/code/sts2-applications/experiments/akka-raft-fuzz_2015_04_19_15_35_23_IncDDMin_DPOR\"\n-    var msgDeserializer = new RaftMessageDeserializer(Instrumenter().actorSystem)\n \n     println(\"Trying replay..\")\n     RunnerUtils.replayExperiment(mcs_dir, fingerprintFactory, msgDeserializer,",
      "status": "On branch akka-raft\nYour branch is up-to-date with 'origin/akka-raft'.\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   interposition/src/main/scala/verification/RunnerUtils.scala\n\tmodified:   interposition/src/main/scala/verification/schedulers/AuxilaryTypes.scala\n\tmodified:   src/main/scala/pl/project13/Runner.scala\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"
    }
  },
  "sys": {
    "lsb_release": "",
    "uname": "Darwin yossarian 14.3.0 Darwin Kernel Version 14.3.0: Mon Mar 23 11:59:05 PDT 2015; root:xnu-2782.20.48~5/RELEASE_X86_64 x86_64"
  },
  "timestamp": "2015_05_18_17_09_51",
  "user": "cs"
}
