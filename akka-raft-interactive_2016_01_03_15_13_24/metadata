{
  "additional_metadata": null,
  "argv": [
    "././interposition/src/main/python/setup.py",
    "-t",
    "-n",
    "akka-raft-interactive"
  ],
  "cwd": "/Users/cs/Research/UCB/code/demi-applications",
  "host": {
    "cpu_info": "",
    "free": "",
    "name": "yossarian",
    "num_cores": "0",
    "uptime": "15:13  up 2 days, 17:20, 5 users, load averages: 1.82 1.62 1.42"
  },
  "modules": {
    "sts2": {
      "branch": "raft-45",
      "commit": "6a00e2c1c061eadcbb66a6322f5e18bd43d0d63d",
      "diff": "diff --git a/interposition/src/main/scala/verification/schedulers/InteractiveScheduler.scala b/interposition/src/main/scala/verification/schedulers/InteractiveScheduler.scala\nindex 929eb2f..af279d6 100644\n--- a/interposition/src/main/scala/verification/schedulers/InteractiveScheduler.scala\n+++ b/interposition/src/main/scala/verification/schedulers/InteractiveScheduler.scala\n@@ -10,6 +10,12 @@ import java.util.concurrent.atomic.AtomicBoolean\n \n import akka.dispatch.Envelope\n \n+import org.slf4j.LoggerFactory,\n+       ch.qos.logback.classic.Level,\n+       ch.qos.logback.classic.Logger\n+\n+// TODO(cs): add an optional SrcDstFIFO constraint.\n+\n sealed trait JLineEvent\n case class Line(value: String) extends JLineEvent\n case object EmptyLine extends JLineEvent\n@@ -208,6 +214,8 @@ class DemiConsole {\n class InteractiveScheduler(val schedulerConfig: SchedulerConfig)\n   extends AbstractScheduler with ExternalEventInjector[ExternalEvent] {\n \n+  override val logger = LoggerFactory.getLogger(\"InteractiveScheduler\")\n+\n   val shuttingDown = new AtomicBoolean(false)\n \n   // Current set of enabled events.\n@@ -218,7 +226,7 @@ class InteractiveScheduler(val schedulerConfig: SchedulerConfig)\n   val console = new DemiConsole\n   console.printHeader\n   val deliverEventCmd = console.cmd(\"deliver\", \"d\", \"Deliver the pending event with the given id\")\n-                            .arg(\"id\", \"id of pending event [integer].\")\n+                               .arg(\"id\", \"id of pending event [integer].\")\n   val checkInvariantCmd = console.cmd(\"inv\", \"i\", \"Check the given invariant\")\n \n   var test_invariant : TestOracle.Invariant = schedulerConfig.invariant_check match {\n@@ -232,6 +240,7 @@ class InteractiveScheduler(val schedulerConfig: SchedulerConfig)\n \n   def run(_externals:Seq[ExternalEvent]): Tuple2[EventTrace,Option[ViolationFingerprint]] = {\n     externals = _externals\n+    event_orchestrator.events.setOriginalExternalEvents(_externals)\n     Instrumenter().scheduler = this\n     return (execute_trace(_externals), violation)\n   }\n@@ -339,10 +348,11 @@ class InteractiveScheduler(val schedulerConfig: SchedulerConfig)\n     // Assign mappings from unique id <-> char\n     val idToAlias = new HashMap[Int,Char]\n     val aliasToId = new HashMap[Char,Int]\n+    val sortedPending = pendingEvents.toSeq.sortBy(u => u.id)\n \n     {\n     var currentAlias = 'a'\n-    pendingEvents.foreach { case uniq =>\n+    sortedPending.foreach { case uniq =>\n       idToAlias(uniq.id) = currentAlias\n       aliasToId(currentAlias) = uniq.id\n       currentAlias = (currentAlias + 1).toChar\n@@ -351,7 +361,7 @@ class InteractiveScheduler(val schedulerConfig: SchedulerConfig)\n \n     def printEventsWithIds() {\n       println(\"Pending events:\")\n-      pendingEvents.foreach { case uniq =>\n+      sortedPending.foreach { case uniq =>\n         val cell = uniq.element._1\n         val envelope = uniq.element._2\n         val snd = envelope.sender.path.name\n@@ -394,6 +404,7 @@ class InteractiveScheduler(val schedulerConfig: SchedulerConfig)\n             }\n           }\n         // TODO(cs): inject external?\n+        // TODO(cs): drop message [to clean up delivery options]\n         case _ =>\n           println(s\"Unknown command: $command\")\n       }\n@@ -407,9 +418,12 @@ class InteractiveScheduler(val schedulerConfig: SchedulerConfig)\n     }\n   }\n \n+  // TODO(cs): investigate bug: notify_timer_cancel is sometimes called\n+  // *after* timer itself has been tellEnqueue.tell()'ed\n   def notify_timer_cancel(rcv: String, msg: Any) {\n+    logger.trace(s\"notify_timer_cancel: $rcv $msg\")\n     pendingEvents.retain(uniq =>\n-      uniq.element._2.message != msg &&\n+      uniq.element._2.message != msg ||\n       uniq.element._1.self.path.name != rcv)\n   }\n \ndiff --git a/src/main/resources/logback.xml b/src/main/resources/logback.xml\nindex 632207f..ba474ae 100644\n--- a/src/main/resources/logback.xml\n+++ b/src/main/resources/logback.xml\n@@ -6,7 +6,7 @@\n     </encoder>\n   </appender>\n \n-  <root level=\"DEBUG\">\n+  <root level=\"TRACE\">\n     <appender-ref ref=\"STDOUT\" />\n   </root>\n </configuration>\ndiff --git a/src/main/scala/pl/project13/Runner.scala b/src/main/scala/pl/project13/Runner.scala\nindex ab112b5..3d9fda5 100644\n--- a/src/main/scala/pl/project13/Runner.scala\n+++ b/src/main/scala/pl/project13/Runner.scala\n@@ -155,8 +155,8 @@ object Init {\n }\n \n object Main extends App {\n-  Instrumenter().setLogLevel(\"OFF\")\n-  //Instrumenter().setLogLevel(\"DEBUG\")\n+  //Instrumenter().setLogLevel(\"OFF\")\n+  Instrumenter().setLogLevel(\"DEBUG\")\n \n   EventTypes.setExternalMessageFilter(Init.externalMessageFilter)\n   Instrumenter().setPassthrough\n@@ -253,37 +253,41 @@ object Main extends App {\n       RunnerUtils.getDeliveries(verified_mcs.get).size)\n     println(\"MCS DIR: \" + mcs_dir)\n   } else { // !fuzz\n-    //val dir =\n-    //\"experiments/akka-raft-fuzz-long_2015_09_02_12_18_50\"\n+    //val dir = \"experiments/akka-raft-interactive_2016_01_03_14_49_33\"\n+\n+    val dir =\n+    \"experiments/akka-raft-fuzz-long_2015_09_02_12_18_50\"\n     val mcs_dir =\n-    \"experiments/akka-raft-fuzz-long_2015_09_02_12_18_50_DDMin_STSSchedNoPeek\"\n+     \"experiments/akka-raft-fuzz-long_2015_09_02_12_18_50_DDMin_STSSchedNoPeek\"\n \n     val msgSerializer = new RaftMessageSerializer\n     val msgDeserializer = new RaftMessageDeserializer(Instrumenter()._actorSystem)\n \n-    val deserializer = new ExperimentDeserializer(mcs_dir)\n-    val violation = deserializer.get_violation(msgDeserializer)\n-    val externals = deserializer.get_mcs\n+    //RunnerUtils.replayExperiment(dir, schedulerConfig, msgDeserializer)\n \n-    println(\"externals:\")\n-    externals.foreach { case e => println(e) }\n+     val deserializer = new ExperimentDeserializer(mcs_dir)\n+     val violation = deserializer.get_violation(msgDeserializer)\n+     val externals = deserializer.get_mcs\n \n-    // TODO(cs): put me in RunnerUtils, along with recording.\n-    val sched = new InteractiveScheduler(schedulerConfig)\n-    Instrumenter().scheduler = sched\n-    val (trace, maybeViolation) = sched.run(externals)\n+     println(\"externals:\")\n+     externals.foreach { case e => println(e) }\n \n-    val serializer = new ExperimentSerializer(\n-      fingerprintFactory,\n-      msgSerializer)\n+     // TODO(cs): put me in RunnerUtils, along with recording.\n+     val sched = new InteractiveScheduler(schedulerConfig)\n+     Instrumenter().scheduler = sched\n+     val (trace, maybeViolation) = sched.run(externals)\n+\n+     val serializer = new ExperimentSerializer(\n+       fingerprintFactory,\n+       msgSerializer)\n \n-    val new_dir = serializer.record_experiment(\"akka-raft-interactive\",\n-      trace.filterCheckpointMessages())\n+     val new_dir = serializer.record_experiment(\"akka-raft-interactive\",\n+       trace.filterCheckpointMessages())\n \n-    //serializer.recordMinimizationStats(dir, stats)\n+     //serializer.recordMinimizationStats(dir, stats)\n \n-    println(\"Found failing trace: \" + trace.filterCheckpointMessages().size)\n-    println(\"Saved trace at \" + new_dir)\n+     println(\"Found failing trace: \" + trace.filterCheckpointMessages().size)\n+     println(\"Saved trace at \" + new_dir)\n \n     // def shouldRerunDDMin(externals: Seq[ExternalEvent]) =\n     //   externals.exists({\ndiff --git a/src/main/scala/pl/project13/scala/akka/raft/Follower.scala b/src/main/scala/pl/project13/scala/akka/raft/Follower.scala\nindex bd4d05d..fede2da 100644\n--- a/src/main/scala/pl/project13/scala/akka/raft/Follower.scala\n+++ b/src/main/scala/pl/project13/scala/akka/raft/Follower.scala\n@@ -20,9 +20,10 @@ private[raft] trait Follower {\n       stay()\n \n     // election\n-    case Event(RequestVote(term, candidate, lastLogTerm, lastLogIndex), m: Meta)\n+    case Event(msg @ RequestVote(term, candidate, lastLogTerm, lastLogIndex), m: Meta)\n       if term > m.currentTerm =>\n       log.info(\"Received newer {}. Current term is {}. Revert to follower state.\", term, m.currentTerm)\n+      m.clusterSelf forward msg\n       stay() using m.withTerm(term)\n \n     case Event(RequestVote(term, candidate, lastLogTerm, lastLogIndex), m: Meta)",
      "status": "On branch raft-45\nYour branch is up-to-date with 'origin/raft-45'.\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   interposition/src/main/scala/verification/schedulers/InteractiveScheduler.scala\n\tmodified:   src/main/resources/logback.xml\n\tmodified:   src/main/scala/pl/project13/Runner.scala\n\tmodified:   src/main/scala/pl/project13/scala/akka/raft/Follower.scala\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"
    }
  },
  "sys": {
    "lsb_release": "",
    "uname": "Darwin yossarian 14.5.0 Darwin Kernel Version 14.5.0: Tue Sep  1 21:23:09 PDT 2015; root:xnu-2782.50.1~1/RELEASE_X86_64 x86_64"
  },
  "timestamp": "2016_01_03_15_13_24",
  "user": "cs"
}
