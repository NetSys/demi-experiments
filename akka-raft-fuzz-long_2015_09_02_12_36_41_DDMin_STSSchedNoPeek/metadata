{
  "additional_metadata": null,
  "argv": [
    "./interposition/src/main/python/setup.py",
    "-n",
    "akka-raft-fuzz-long_2015_09_02_12_36_41_DDMin_STSSchedNoPeek"
  ],
  "cwd": "/Users/cs/Research/UCB/code/sts2-applications",
  "host": {
    "cpu_info": "",
    "free": "",
    "name": "yossarian",
    "num_cores": "0",
    "uptime": "12:36  up 9 days, 10:33, 8 users, load averages: 2.10 1.70 1.60"
  },
  "modules": {
    "sts2": {
      "branch": "raft-46",
      "commit": "6eb05ec890a23d6fa6942b5043acd735eccd811c",
      "diff": "diff --git a/src/main/scala/pl/project13/Runner.scala b/src/main/scala/pl/project13/Runner.scala\nindex d655a29..948cd30 100644\n--- a/src/main/scala/pl/project13/Runner.scala\n+++ b/src/main/scala/pl/project13/Runner.scala\n@@ -80,14 +80,14 @@ class RaftMessageFingerprinter extends MessageFingerprinter {\n   }\n }\n \n-class ClientMessageGenerator(raft_members: Seq[String]) extends MessageGenerator {\n-  class AppendWordConstuctor(word: String) extends ExternalMessageConstructor {\n-    def apply() : Any = {\n-      return ClientMessage[AppendWord](Instrumenter().actorSystem.deadLetters, AppendWord(word))\n-    }\n+class AppendWordConstuctor(word: String) extends ExternalMessageConstructor {\n+  def apply() : Any = {\n+    return ClientMessage[AppendWord](Instrumenter().actorSystem.deadLetters, AppendWord(word))\n   }\n+}\n \n-  val wordsUsedSoFar = new HashSet[String]\n+class ClientMessageGenerator(raft_members: Seq[String]) extends MessageGenerator {\n+  var highestWordUsedSoFar = 0\n   val rand = new Random\n   val destinations = new RandomizedHashSet[String]\n   for (dst <- raft_members) {\n@@ -96,13 +96,8 @@ class ClientMessageGenerator(raft_members: Seq[String]) extends MessageGenerator\n \n   def generateMessage(alive: RandomizedHashSet[String]) : Send = {\n     val dst = destinations.getRandomElement()\n-    // TODO(cs): 10000 is a bit arbitrary, and this algorithm fails\n-    // disastrously as we start to approach 10000 Send events.\n-    var word = rand.nextInt(10000).toString\n-    while (wordsUsedSoFar contains word) {\n-      word = rand.nextInt(10000).toString\n-    }\n-    wordsUsedSoFar += word\n+    var word = highestWordUsedSoFar.toString\n+    highestWordUsedSoFar += 1\n     return Send(dst, new AppendWordConstuctor(word))\n   }\n }\n@@ -201,9 +196,9 @@ object Main extends App {\n   val weights = new FuzzerWeights(kill=0.00, send=0.3, wait_quiescence=0.0,\n                                   partition=0.0, unpartition=0)\n   val messageGen = new ClientMessageGenerator(members)\n-  val fuzzer = new Fuzzer(0, weights, messageGen, prefix)\n+  val fuzzer = new Fuzzer(100, weights, messageGen, prefix)\n \n-  val fuzz = false\n+  val fuzz = true\n \n   var traceFound: EventTrace = null\n   var violationFound: ViolationFingerprint = null\n@@ -255,62 +250,20 @@ object Main extends App {\n     println(\"MCS DIR: \" + mcs_dir)\n   } else { // !fuzz\n     val dir =\n-    \"/Users/cs/Research/UCB/code/sts2-applications/experiments/akka-raft-fuzz-long_2015_08_24_22_47_54\"\n+    \"experiments/akka-raft-fuzz-long_2015_08_24_22_47_54\"\n     val mcs_dir =\n-    \"/Users/cs/Research/UCB/code/sts2-applications/experiments/akka-raft-fuzz-long_2015_08_24_22_47_54_DDMin_STSSchedNoPeek\"\n+    \"experiments/akka-raft-fuzz-long_2015_08_24_22_47_54_DDMin_STSSchedNoPeek\"\n \n-    val serializer = new ExperimentSerializer(\n-      fingerprintFactory,\n-      new RaftMessageSerializer)\n-\n-    val deserializer = new ExperimentDeserializer(mcs_dir)\n+    val msgSerializer = new RaftMessageSerializer\n     val msgDeserializer = new RaftMessageDeserializer(Instrumenter()._actorSystem)\n \n-    // TODO(cs): rerun the fuzz run, so that we can reuse stats. [currently\n-    // legacy format]\n-    val (mcs, verified_mcs, violationFound, actors, _) =\n-      RunnerUtils.deserializeMCS(mcs_dir, msgDeserializer)\n-\n-    var removalStrategy = new SrcDstFIFORemoval(verified_mcs,\n-      schedulerConfig.messageFingerprinter)\n-\n-    val (intMinStats, intMinTrace) = RunnerUtils.minimizeInternals(schedulerConfig,\n-      mcs, verified_mcs, actors, violationFound, removalStrategyCtor=() => removalStrategy)\n-\n-    var additionalTraces = Seq[(String, EventTrace)]()\n-\n-    // First run without backtracks\n-    var minimizer = new FungibleClockMinimizer(schedulerConfig, mcs,\n-      intMinTrace, actors, violationFound,\n-      //testScheduler=TestScheduler.DPORwHeuristics,\n-      stats=Some(intMinStats))\n-    val (wildcard_stats1, clusterMinTrace1) = minimizer.minimize\n-\n-    additionalTraces = additionalTraces :+ ((\"FungibleClocksNoBacktracks\", clusterMinTrace1))\n-\n-    // Now with backtracks\n-    minimizer = new FungibleClockMinimizer(schedulerConfig, mcs,\n-      clusterMinTrace1, actors, violationFound,\n-      testScheduler=TestScheduler.DPORwHeuristics,\n-      stats=Some(wildcard_stats1))\n-    val (wildcard_stats2, clusterMinTrace2) = minimizer.minimize\n-\n-    removalStrategy = new SrcDstFIFORemoval(clusterMinTrace2,\n-      schedulerConfig.messageFingerprinter)\n-\n-    val (minStats2, minTrace2) = RunnerUtils.minimizeInternals(schedulerConfig,\n-      mcs, clusterMinTrace2, actors, violationFound,\n-      removalStrategyCtor=() => removalStrategy,\n-      stats=Some(wildcard_stats2))\n-\n-    additionalTraces = additionalTraces :+ ((\"2nd intMin\", minTrace2))\n-\n-    val (traceFound, _, _) = RunnerUtils.deserializeExperiment(dir, msgDeserializer)\n-    val origDeserializer = new ExperimentDeserializer(dir)\n-    val filteredTrace = origDeserializer.get_filtered_initial_trace\n+    def shouldRerunDDMin(externals: Seq[ExternalEvent]) =\n+      externals.exists({\n+        case s: Send => s.messageCtor.isInstanceOf[AppendWordConstuctor]\n+        case _ => false\n+      })\n \n-    RunnerUtils.printMinimizationStats(\n-      traceFound, filteredTrace, verified_mcs, intMinTrace, schedulerConfig.messageFingerprinter,\n-      additionalTraces)\n+    RunnerUtils.runTheGamut(dir, mcs_dir, schedulerConfig, msgSerializer,\n+      msgDeserializer, paranoid=false, shouldRerunDDMin=shouldRerunDDMin)\n   }\n }",
      "status": "On branch raft-46\nYour branch is up-to-date with 'origin/raft-46'.\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   src/main/scala/pl/project13/Runner.scala\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"
    }
  },
  "sys": {
    "lsb_release": "",
    "uname": "Darwin yossarian 14.5.0 Darwin Kernel Version 14.5.0: Wed Jul 29 02:26:53 PDT 2015; root:xnu-2782.40.9~1/RELEASE_X86_64 x86_64"
  },
  "timestamp": "2015_09_02_12_36_46",
  "user": "cs"
}
