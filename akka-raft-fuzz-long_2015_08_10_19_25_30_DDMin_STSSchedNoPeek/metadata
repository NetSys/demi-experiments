{
  "additional_metadata": null,
  "argv": [
    "./interposition/src/main/python/setup.py",
    "-n",
    "akka-raft-fuzz-long_2015_08_10_19_25_30_DDMin_STSSchedNoPeek"
  ],
  "cwd": "/Users/cs/Research/UCB/code/sts2-applications",
  "host": {
    "cpu_info": "",
    "free": "",
    "name": "yossarian",
    "num_cores": "0",
    "uptime": "19:26  up 4 days, 23:20, 7 users, load averages: 2.44 2.00 1.80"
  },
  "modules": {
    "sts2": {
      "branch": "raft-59",
      "commit": "8f732b5892aca10fd655f352bfcf7773f8f37a79",
      "diff": "diff --git a/indent.rb b/indent.rb\nindex b44256a..ac626b7 100755\n--- a/indent.rb\n+++ b/indent.rb\n@@ -1,18 +1,12 @@\n #!/usr/bin/ruby\n \n-once = false\n File.foreach(ARGV.shift) do |line|\n   if line =~ /BEFORE/\n     puts \"  \" + line\n   elsif line =~ /AFTER/\n     puts \"  \" + line\n-    if (once)\n-      once = false\n-      puts\n-    else\n-      once = true\n-    end\n   elsif line =~ /schedule_new_message/\n+    puts\n     puts line\n     puts\n   end\ndiff --git a/src/main/scala/pl/project13/Runner.scala b/src/main/scala/pl/project13/Runner.scala\nindex 75ca5f7..453f620 100644\n--- a/src/main/scala/pl/project13/Runner.scala\n+++ b/src/main/scala/pl/project13/Runner.scala\n@@ -1,6 +1,10 @@\n+package akka.dispatch.verification\n+\n import akka.actor.{ Actor, ActorRef, DeadLetter }\n import akka.actor.{ActorSystem, ExtendedActorSystem}\n import akka.actor.Props\n+import akka.actor.FSM\n+import akka.actor.FSM.Timer\n import akka.dispatch.verification._\n import scala.collection.mutable.Queue\n import scala.collection.mutable.HashMap\n@@ -142,13 +146,65 @@ object Main extends App {\n     members.map(member =>\n       Start(Init.actorCtor, member)) ++\n     members.map(member =>\n-      Send(member, new BootstrapMessageConstructor(Set[Int]())))\n+      Send(member, new BootstrapMessageConstructor(Set[Int]()))) ++\n+    Array[ExternalEvent](\n+      WaitCondition(() => LeaderTest.totalElected.get > 0))\n+      //Send(\"raft-member-3\", new AppendWordConstuctor(\"WORD1\")),\n+      //Send(\"raft-member-3\", new AppendWordConstuctor(\"WORD2\"))\n+    //)\n     //Array[ExternalEvent](WaitQuiescence()\n   //) XXX\n   // -- --\n \n+  val rand = new Random(0)\n+  val toSchedule = new Queue[(String,String,String)]\n+  def userDefinedFilter(src: String, dst: String, msg: Any): Boolean = {\n+    toSchedule.synchronized {\n+      if (toSchedule.isEmpty) {\n+        msg match {\n+          case Timer(\"election-timer\", _, _, _) =>\n+            if (rand.nextDouble < 0.70) {\n+              return false\n+            }\n+            return true\n+          case _ => return true\n+        }\n+      } else {\n+        // Force toSchedule to be scheduled\n+        val (s,d,m) = toSchedule.head\n+        if (src == s && dst == d && msg.toString.contains(m)) {\n+          toSchedule.dequeue\n+          return true\n+        }\n+        return false\n+      }\n+    }\n+  }\n+  def consensusInterleaving(): Boolean = {\n+    LeaderTest.consensusReached.synchronized {\n+      if (LeaderTest.consensusReached.size > 0) {\n+        toSchedule.synchronized {\n+          if (toSchedule.isEmpty) {\n+            val nextLeader = Instrumenter().actorMappings.keys.find(\n+              a => a != LeaderTest.consensusReached.keys.head &&\n+                   !ActorTypes.systemActor(a)).get\n+            toSchedule += ((\"deadLetters\", nextLeader, \"Timer(election-timer\"))\n+            // TODO(cs): also add heartbeat from nextLeader -> oldLeader?\n+          }\n+        }\n+        return true\n+      }\n+    }\n+    return false\n+  }\n+\n+  val postfix = Array[ExternalEvent](\n+    WaitCondition(consensusInterleaving))\n+\n   def shutdownCallback() = {\n     raftChecks.clear\n+    LeaderTest.totalElected.set(0)\n+    LeaderTest.consensusReached.clear\n   }\n \n   Instrumenter().registerShutdownCallback(shutdownCallback)\n@@ -166,9 +222,9 @@ object Main extends App {\n   val weights = new FuzzerWeights(kill=0.00, send=0.3, wait_quiescence=0.0,\n                                   partition=0.0, unpartition=0)\n   val messageGen = new ClientMessageGenerator(members)\n-  val fuzzer = new Fuzzer(200, weights, messageGen, prefix)\n+  val fuzzer = new Fuzzer(60, weights, messageGen, prefix, postfix=postfix)\n \n-  val fuzz = false\n+  val fuzz = true\n \n   var traceFound: EventTrace = null\n   var violationFound: ViolationFingerprint = null\n@@ -181,11 +237,16 @@ object Main extends App {\n       val replayer = new ReplayScheduler(schedulerConfig)\n       return replayer\n     }\n+\n+    def randomiziationCtor() : RandomizationStrategy = {\n+      return new FullyRandom(userDefinedFilter)\n+    }\n     val tuple = RunnerUtils.fuzz(fuzzer, raftChecks.invariant,\n                                  schedulerConfig,\n                                  validate_replay=Some(replayerCtor),\n-                                 maxMessages=Some(300),  // XXX\n-                                 invariant_check_interval=5,\n+                                 maxMessages=Some(10000),  // XXX\n+                                 invariant_check_interval=50,\n+                                 randomizationStrategyCtor=randomiziationCtor,\n                                  computeProvenance=false) // XXX\n     traceFound = tuple._1\n     violationFound = tuple._2\n@@ -213,6 +274,10 @@ object Main extends App {\n       violationFound,\n       actorNameProps=Some(ExperimentSerializer.getActorNameProps(traceFound)))\n \n+    if (verified_mcs.isEmpty) {\n+      throw new RuntimeException(\"MCS wasn't validated\")\n+    }\n+\n     val mcs_dir = serializer.serializeMCS(dir, mcs, stats, verified_mcs, violation, false)\n \n     // Actually try minimizing twice, to make it easier to understand what's\ndiff --git a/src/main/scala/pl/project13/scala/akka/raft/example/WordConcatRaftActor.scala b/src/main/scala/pl/project13/scala/akka/raft/example/WordConcatRaftActor.scala\nindex 9317af8..f508e09 100644\n--- a/src/main/scala/pl/project13/scala/akka/raft/example/WordConcatRaftActor.scala\n+++ b/src/main/scala/pl/project13/scala/akka/raft/example/WordConcatRaftActor.scala\n@@ -37,14 +37,14 @@ class WordConcatRaftActor extends RaftActor {\n     case m =>\n       //println(\"RAFT \" + self.path.name + \" FSM received \" + m + \" \" + super.getLog.map(_.stateName) + \" \" +\n       //  isTimerActive(ElectionTimeoutTimerName) )\n-      println(\"BEFORE RECEIVE, LOG: \" + replicatedLog)\n+      println(Thread.currentThread.getName + \"BEFORE RECEIVE, LOG: \" + replicatedLog)\n       println(\"BEFORE RECEIVE, STATE: \" + stateData)\n       if (stateData.getClass == classOf[LeaderMeta]) {\n         println(\"BEFORE RECEIVE, nextIndex: \" + nextIndex)\n         println(\"BEFORE RECEIVE, matchIndex: \" + matchIndex)\n       }\n       super.receive(m)\n-      println(\"AFTER RECEIVE, LOG: \" + replicatedLog)\n+      println(Thread.currentThread.getName + \"AFTER RECEIVE, LOG: \" + replicatedLog)\n       println(\"AFTER RECEIVE, STATE: \" + stateData)\n       println(\"AFTER RECEIVE, words: \" + words)\n       if (stateData.getClass == classOf[LeaderMeta]) {",
      "status": "On branch raft-59\nYour branch is ahead of 'origin/raft-59' by 10 commits.\n  (use \"git push\" to publish your local commits)\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   indent.rb\n\tmodified:   src/main/scala/pl/project13/Runner.scala\n\tmodified:   src/main/scala/pl/project13/scala/akka/raft/example/WordConcatRaftActor.scala\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\telection_safety\n\tlong_run_indented\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"
    }
  },
  "sys": {
    "lsb_release": "",
    "uname": "Darwin yossarian 14.4.0 Darwin Kernel Version 14.4.0: Thu May 28 11:35:04 PDT 2015; root:xnu-2782.30.5~1/RELEASE_X86_64 x86_64"
  },
  "timestamp": "2015_08_10_19_26_01",
  "user": "cs"
}
