{
  "additional_metadata": null,
  "argv": [
    "./interposition/src/main/python/setup.py",
    "-n",
    "akka-raft-fuzz-long_2015_08_05_20_28_04_DDMin_STSSchedNoPeek"
  ],
  "cwd": "/Users/cs/Research/UCB/code/sts2-applications",
  "host": {
    "cpu_info": "",
    "free": "",
    "name": "yossarian",
    "num_cores": "0",
    "uptime": "20:28  up 22 mins, 7 users, load averages: 1.74 1.88 1.53"
  },
  "modules": {
    "sts2": {
      "branch": "raft-59",
      "commit": "583f0c21e7ea7a9b7693396c061ee3410726e662",
      "diff": "diff --git a/interposition/src/main/scala/verification/Serialization.scala b/interposition/src/main/scala/verification/Serialization.scala\nindex 051b3b4..adf19ea 100644\n--- a/interposition/src/main/scala/verification/Serialization.scala\n+++ b/interposition/src/main/scala/verification/Serialization.scala\n@@ -155,6 +155,8 @@ class ExperimentSerializer(message_fingerprinter: FingerprintFactory, message_se\n     JavaSerialization.writeToFile(output_dir + ExperimentSerializer.idGenerator,\n       JavaSerialization.serialize(IDGenerator.uniqueId.get()))\n \n+    println(\"Writing ActorNameProps\")\n+    System.out.flush\n     val actorPropNamePairs = ExperimentSerializer.getActorNameProps(trace)\n     val actorNameBuf = JavaSerialization.serialize(actorPropNamePairs.toArray)\n     JavaSerialization.writeToFile(output_dir + ExperimentSerializer.actors,\n@@ -169,16 +171,22 @@ class ExperimentSerializer(message_fingerprinter: FingerprintFactory, message_se\n     // http://stackoverflow.com/questions/25147565/serializing-java-object-without-stackoverflowerror\n     val asArray : Array[Event] = sanitized.toArray\n \n+    println(\"Writing trace.events\")\n+    System.out.flush\n     val sanitizedBuf = JavaSerialization.serialize(asArray)\n     JavaSerialization.writeToFile(output_dir + ExperimentSerializer.event_trace,\n                                   sanitizedBuf)\n \n     // Serialize the violation\n+    println(\"Writing violation\")\n+    System.out.flush\n     val violationBuf = JavaSerialization.serialize(violation)\n     JavaSerialization.writeToFile(output_dir + ExperimentSerializer.violation,\n                                   violationBuf)\n \n     // Serialize the external events.\n+    println(\"Writing externals\")\n+    System.out.flush\n     val externalsAsArray : Array[ExternalEvent] = trace.original_externals.toArray\n     val externalBuf = JavaSerialization.serialize(externalsAsArray)\n     JavaSerialization.writeToFile(output_dir + ExperimentSerializer.original_externals,\n@@ -186,6 +194,8 @@ class ExperimentSerializer(message_fingerprinter: FingerprintFactory, message_se\n \n     depGraph match {\n       case Some(graph) =>\n+        println(\"Writing depGraph\")\n+        System.out.flush\n         val graphBuf = JavaSerialization.serialize(graph)\n         JavaSerialization.writeToFile(output_dir + ExperimentSerializer.depGraph,\n                                       graphBuf)\n@@ -198,6 +208,8 @@ class ExperimentSerializer(message_fingerprinter: FingerprintFactory, message_se\n          (filteredTrace, ExperimentSerializer.filteredTrace))) {\n       dporTrace match {\n         case Some(t) =>\n+          println(\"Writing \" + outputFile)\n+          System.out.flush\n           val tAsArray : Array[Unique] = t.toArray\n           val traceBuf = JavaSerialization.serialize(tAsArray)\n           JavaSerialization.writeToFile(output_dir + outputFile, traceBuf)\ndiff --git a/src/main/scala/pl/project13/Runner.scala b/src/main/scala/pl/project13/Runner.scala\nindex efefb6a..8821a6f 100644\n--- a/src/main/scala/pl/project13/Runner.scala\n+++ b/src/main/scala/pl/project13/Runner.scala\n@@ -184,8 +184,8 @@ object Main extends App {\n     val tuple = RunnerUtils.fuzz(fuzzer, raftChecks.invariant,\n                                  schedulerConfig,\n                                  validate_replay=Some(replayerCtor),\n-                                 maxMessages=Some(700),  // XXX\n-                                 invariant_check_interval=10,\n+                                 maxMessages=Some(300),  // XXX\n+                                 invariant_check_interval=5,\n                                  computeProvenance=false) // XXX\n     traceFound = tuple._1\n     violationFound = tuple._2",
      "status": "On branch raft-59\nYour branch is up-to-date with 'origin/raft-59'.\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   interposition/src/main/scala/verification/Serialization.scala\n\tmodified:   src/main/scala/pl/project13/Runner.scala\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\tlong_run.txt\n\tstacktrace\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"
    }
  },
  "sys": {
    "lsb_release": "",
    "uname": "Darwin yossarian 14.4.0 Darwin Kernel Version 14.4.0: Thu May 28 11:35:04 PDT 2015; root:xnu-2782.30.5~1/RELEASE_X86_64 x86_64"
  },
  "timestamp": "2015_08_05_20_28_05",
  "user": "cs"
}
