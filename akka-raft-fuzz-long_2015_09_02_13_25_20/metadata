{
  "additional_metadata": null,
  "argv": [
    "./interposition/src/main/python/setup.py",
    "-t",
    "-n",
    "akka-raft-fuzz-long"
  ],
  "cwd": "/Users/cs/Research/UCB/code/sts2-applications",
  "host": {
    "cpu_info": "",
    "free": "",
    "name": "yossarian",
    "num_cores": "0",
    "uptime": "13:25  up 9 days, 11:21, 8 users, load averages: 2.39 2.29 1.90"
  },
  "modules": {
    "sts2": {
      "branch": "raft-58-initialization",
      "commit": "aaefa5dc7d143da88e9f437b39068bc6528f7b73",
      "diff": "diff --git a/src/main/resources/cluster.conf b/src/main/resources/cluster.conf\nindex 6a94a8a..a82e9e8 100644\n--- a/src/main/resources/cluster.conf\n+++ b/src/main/resources/cluster.conf\n@@ -1,4 +1,7 @@\n akka {\n+  stdout-loglevel = \"WARN\"\n+  loglevel = \"WARN\"\n+\n   actor {\n     provider = \"akka.cluster.ClusterActorRefProvider\"\n   }\ndiff --git a/src/main/resources/logback.xml b/src/main/resources/logback.xml\nindex 483d1ae..652b082 100644\n--- a/src/main/resources/logback.xml\n+++ b/src/main/resources/logback.xml\n@@ -6,7 +6,7 @@\n     </encoder>\n   </appender>\n \n-  <root level=\"trace\">\n+  <root level=\"WARN\">\n     <appender-ref ref=\"STDOUT\" />\n   </root>\n </configuration>\ndiff --git a/src/main/scala/pl/project13/Runner.scala b/src/main/scala/pl/project13/Runner.scala\nindex 36f8bf7..4316130 100644\n--- a/src/main/scala/pl/project13/Runner.scala\n+++ b/src/main/scala/pl/project13/Runner.scala\n@@ -248,9 +248,9 @@ object Main extends App {\n   val weights = new FuzzerWeights(kill=0.00, send=0.3, wait_quiescence=0.0,\n                                   partition=0.0, unpartition=0)\n   val messageGen = new ClientMessageGenerator(members)\n-  val fuzzer = new Fuzzer(60, weights, messageGen, prefix, postfix=postfix)\n+  val fuzzer = new Fuzzer(100, weights, messageGen, prefix, postfix=postfix)\n \n-  val fuzz = false\n+  val fuzz = true\n \n   var traceFound: EventTrace = null\n   var violationFound: ViolationFingerprint = null\n@@ -305,6 +305,8 @@ object Main extends App {\n     }\n \n     val mcs_dir = serializer.serializeMCS(dir, mcs, stats1, verified_mcs, violation, false)\n+    println(\"verified_mcs.size: \" +\n+      RunnerUtils.getDeliveries(verified_mcs.get).size)\n     println(\"MCS DIR: \" + mcs_dir)\n   } else { // !fuzz\n     val dir =\n@@ -312,129 +314,16 @@ object Main extends App {\n     val mcs_dir =\n     \"experiments/akka-raft-fuzz-long_2015_08_28_19_01_08_DDMin_STSSchedNoPeek\"\n \n-    val serializer = new ExperimentSerializer(\n-      fingerprintFactory,\n-      new RaftMessageSerializer)\n-\n-    val deserializer = new ExperimentDeserializer(mcs_dir)\n+    val msgSerializer = new RaftMessageSerializer\n     val msgDeserializer = new RaftMessageDeserializer(Instrumenter()._actorSystem)\n \n-    // -- purely for printing stats --\n-    val (traceFound, _, _) = RunnerUtils.deserializeExperiment(dir, msgDeserializer)\n-    val origDeserializer = new ExperimentDeserializer(dir)\n-    val filteredTrace = origDeserializer.get_filtered_initial_trace\n-    // -- --\n-\n-    val (mcs, verified_mcs, violationFound, actors, stats) =\n-      RunnerUtils.deserializeMCS(mcs_dir, msgDeserializer)\n-\n-    var currentExternals = mcs\n-    var currentTrace = verified_mcs\n-    var currentStats = stats\n-\n-    var removalStrategy = new SrcDstFIFORemoval(currentTrace,\n-      schedulerConfig.messageFingerprinter)\n-\n-    val (intMinStats, intMinTrace) = RunnerUtils.minimizeInternals(schedulerConfig,\n-      currentExternals, currentTrace, actors, violationFound,\n-      removalStrategyCtor=() => removalStrategy, stats=Some(currentStats))\n-\n-    currentTrace = intMinTrace\n-    currentStats = intMinStats\n-\n-    var additionalTraces = Seq[(String, EventTrace)]()\n-\n-    // fungibleClocks DDMin without backtracks.\n-    val (newMCS, clocksDDMinStats, clockDDMinTrace, _) =\n-      RunnerUtils.fungibleClocksDDMin(schedulerConfig,\n-        currentTrace,\n-        violationFound,\n-        actors,\n-        stats=Some(currentStats))\n-\n-    currentTrace = clockDDMinTrace.get\n-    currentStats = clocksDDMinStats\n-    currentExternals = newMCS\n-\n-    additionalTraces = additionalTraces :+ ((\"WildcardDDMinNoBacktracks\", clockDDMinTrace.get))\n-\n-    // Without backtracks first\n-    var minimizer = new FungibleClockMinimizer(schedulerConfig,\n-      currentExternals,\n-      currentTrace, actors, violationFound,\n-      //testScheduler=TestScheduler.DPORwHeuristics,\n-      stats=Some(currentStats))\n-    val (wildcard_stats1, clusterMinTrace1) = minimizer.minimize\n-\n-    currentTrace = clusterMinTrace1\n-    currentStats = wildcard_stats1\n-\n-    additionalTraces = additionalTraces :+ ((\"FungibleClocksNoBackTracks\", clusterMinTrace1))\n-\n-    // N.B. will be overwritten\n-    serializer.recordMinimizedInternals(mcs_dir,\n-       currentStats, currentTrace)\n-\n-    RunnerUtils.printMinimizationStats(\n-      traceFound, filteredTrace, verified_mcs, intMinTrace, schedulerConfig.messageFingerprinter,\n-      additionalTraces)\n-\n-    // Now with backtracks\n-    minimizer = new FungibleClockMinimizer(schedulerConfig, currentExternals,\n-      currentTrace, actors, violationFound,\n-      testScheduler=TestScheduler.DPORwHeuristics,\n-      stats=Some(currentStats))\n-    val (wildcard_stats2, clusterMinTrace2) = minimizer.minimize\n-\n-    currentStats = wildcard_stats2\n-    currentTrace = clusterMinTrace2\n-\n-    additionalTraces = additionalTraces :+ ((\"FungibleClocks\", clusterMinTrace2))\n-\n-    removalStrategy = new SrcDstFIFORemoval(currentTrace,\n-      schedulerConfig.messageFingerprinter)\n-\n-     val (intMinStats2, minTrace2) = RunnerUtils.minimizeInternals(schedulerConfig,\n-       currentExternals, currentTrace, actors, violationFound,\n-       removalStrategyCtor=() => removalStrategy,\n-       stats=Some(currentStats))\n-\n-     currentStats = intMinStats2\n-     currentTrace = minTrace2\n-\n-     additionalTraces = additionalTraces :+ ((\"2nd intMin\", minTrace2))\n-\n-    // N.B. overwrite\n-    serializer.recordMinimizedInternals(mcs_dir,\n-       currentStats, currentTrace)\n-\n-    RunnerUtils.printMinimizationStats(\n-      traceFound, filteredTrace, verified_mcs, intMinTrace, schedulerConfig.messageFingerprinter,\n-      additionalTraces)\n-\n-    /*\n-    // fungibleClocks DDMin with backtracks.\n-    val (newMCS2, clocksDDMinStats2, clockDDMinTrace2, _) =\n-      RunnerUtils.fungibleClocksDDMin(schedulerConfig,\n-        clusterMinTrace2,\n-        violationFound,\n-        actors,\n-        testScheduler=TestScheduler.DPORwHeuristics,\n-        stats=Some(wildcard_stats2))\n-\n-    currentExternals= newMCS2\n-    currentStats = clocksDDMinStats2\n-    currentTrace = clockDDMinTrace2.get\n-\n-    // N.B. overwrite\n-    serializer.recordMinimizedInternals(mcs_dir,\n-       clocksDDMinStats2, clockDDMinTrace2.get)\n-\n-    additionalTraces = additionalTraces :+ ((\"WildcardDDMinNoBacktracks\", clockDDMinTrace2.get))\n+    def shouldRerunDDMin(externals: Seq[ExternalEvent]) =\n+      externals.exists({\n+        case s: Send => s.messageCtor.isInstanceOf[AppendWordConstuctor]\n+        case _ => false\n+      })\n \n-    RunnerUtils.printMinimizationStats(\n-      traceFound, filteredTrace, verified_mcs, intMinTrace, schedulerConfig.messageFingerprinter,\n-      additionalTraces)\n-    */\n+    RunnerUtils.runTheGamut(dir, mcs_dir, schedulerConfig, msgSerializer,\n+      msgDeserializer, paranoid=false, shouldRerunDDMin=shouldRerunDDMin)\n   }\n }\ndiff --git a/src/main/scala/pl/project13/scala/akka/raft/example/WordConcatRaftActor.scala b/src/main/scala/pl/project13/scala/akka/raft/example/WordConcatRaftActor.scala\nindex 7c97968..662c8a1 100644\n--- a/src/main/scala/pl/project13/scala/akka/raft/example/WordConcatRaftActor.scala\n+++ b/src/main/scala/pl/project13/scala/akka/raft/example/WordConcatRaftActor.scala\n@@ -37,17 +37,17 @@ class WordConcatRaftActor extends RaftActor {\n     case m =>\n       //println(\"RAFT \" + self.path.name + \" FSM received \" + m + \" \" + super.getLog.map(_.stateName) + \" \" +\n       //  isTimerActive(ElectionTimeoutTimerName) )\n-      println(\"BEFORE RECEIVE, LOG: \" + replicatedLog)\n-      println(\"BEFORE RECEIVE, STATE: \" + stateData)\n-      println(\"BEFORE RECEIVE, words: \" + words)\n-      println(\"BEFORE RECEIVE, nextIndex: \" + nextIndex)\n-      println(\"BEFORE RECEIVE, matchIndex: \" + matchIndex)\n+      //println(\"BEFORE RECEIVE, LOG: \" + replicatedLog)\n+      //println(\"BEFORE RECEIVE, STATE: \" + stateData)\n+      //println(\"BEFORE RECEIVE, words: \" + words)\n+      //println(\"BEFORE RECEIVE, nextIndex: \" + nextIndex)\n+      //println(\"BEFORE RECEIVE, matchIndex: \" + matchIndex)\n       super.receive(m)\n-      println(\"AFTER RECEIVE, LOG: \" + replicatedLog)\n-      println(\"AFTER RECEIVE, STATE: \" + stateData)\n-      println(\"AFTER RECEIVE, words: \" + words)\n-      println(\"AFTER RECEIVE, nextIndex: \" + nextIndex)\n-      println(\"AFTER RECEIVE, matchIndex: \" + matchIndex)\n+      //println(\"AFTER RECEIVE, LOG: \" + replicatedLog)\n+      //println(\"AFTER RECEIVE, STATE: \" + stateData)\n+      //println(\"AFTER RECEIVE, words: \" + words)\n+      //println(\"AFTER RECEIVE, nextIndex: \" + nextIndex)\n+      //println(\"AFTER RECEIVE, matchIndex: \" + matchIndex)\n       //println(\"RAFT \" + self.path.name + \" Done FSM received \" + m + \" \" + super.getLog.map(_.stateName))\n   }",
      "status": "On branch raft-58-initialization\nYour branch is ahead of 'origin/raft-58-initialization' by 26 commits.\n  (use \"git push\" to publish your local commits)\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   src/main/resources/cluster.conf\n\tmodified:   src/main/resources/logback.xml\n\tmodified:   src/main/scala/pl/project13/Runner.scala\n\tmodified:   src/main/scala/pl/project13/scala/akka/raft/example/WordConcatRaftActor.scala\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"
    }
  },
  "sys": {
    "lsb_release": "",
    "uname": "Darwin yossarian 14.5.0 Darwin Kernel Version 14.5.0: Wed Jul 29 02:26:53 PDT 2015; root:xnu-2782.40.9~1/RELEASE_X86_64 x86_64"
  },
  "timestamp": "2015_09_02_13_25_20",
  "user": "cs"
}
